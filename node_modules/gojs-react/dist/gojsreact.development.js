// Copyright (C) 1998-2022 by Northwoods Software Corporation. All Rights Reserved.
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('gojs'), require('react')) :
    typeof define === 'function' && define.amd ? define(['exports', 'gojs', 'react'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.goJsReact = {}, global.go, global.React));
})(this, (function (exports, go, React) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var go__namespace = /*#__PURE__*/_interopNamespace(go);
    var React__namespace = /*#__PURE__*/_interopNamespace(React);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var ReactDiagram = (function (_super) {
        __extends(ReactDiagram, _super);
        function ReactDiagram(props) {
            var _this = _super.call(this, props) || this;
            _this.wasCleared = false;
            _this.modelChangedListener = null;
            _this.divRef = React__namespace.createRef();
            return _this;
        }
        ReactDiagram.prototype.getDiagram = function () {
            if (this.divRef.current === null)
                return null;
            return go__namespace.Diagram.fromDiv(this.divRef.current);
        };
        ReactDiagram.prototype.clear = function () {
            var diagram = this.getDiagram();
            if (diagram !== null) {
                diagram.clear();
                this.wasCleared = true;
            }
        };
        ReactDiagram.prototype.componentDidMount = function () {
            var _this = this;
            if (this.divRef.current === null)
                return;
            var diagram = this.props.initDiagram();
            diagram.div = this.divRef.current;
            this.modelChangedListener = function (e) {
                if (e.isTransactionFinished && e.model && !e.model.isReadOnly && _this.props.onModelChange) {
                    var dataChanges = e.model.toIncrementalData(e);
                    if (dataChanges !== null)
                        _this.props.onModelChange(dataChanges);
                }
            };
            diagram.addModelChangedListener(this.modelChangedListener);
            diagram.delayInitialization(function () {
                _this.mergeData(diagram, true);
            });
        };
        ReactDiagram.prototype.componentWillUnmount = function () {
            var diagram = this.getDiagram();
            if (diagram !== null) {
                diagram.div = null;
                if (this.modelChangedListener !== null) {
                    diagram.removeModelChangedListener(this.modelChangedListener);
                    this.modelChangedListener = null;
                }
            }
        };
        ReactDiagram.prototype.shouldComponentUpdate = function (nextProps, nextState) {
            if (nextProps.divClassName !== this.props.divClassName || nextProps.style !== this.props.style)
                return true;
            if (nextProps.skipsDiagramUpdate)
                return false;
            if (nextProps.nodeDataArray === this.props.nodeDataArray &&
                nextProps.linkDataArray === this.props.linkDataArray &&
                nextProps.modelData === this.props.modelData)
                return false;
            return true;
        };
        ReactDiagram.prototype.componentDidUpdate = function (prevProps, prevState) {
            var _this = this;
            if (prevProps.nodeDataArray === this.props.nodeDataArray &&
                prevProps.linkDataArray === this.props.linkDataArray &&
                prevProps.modelData === this.props.modelData)
                return;
            var diagram = this.getDiagram();
            if (diagram !== null) {
                if (this.wasCleared) {
                    diagram.delayInitialization(function () {
                        _this.mergeData(diagram, true);
                        _this.wasCleared = false;
                    });
                }
                else {
                    this.mergeData(diagram, false);
                }
            }
        };
        ReactDiagram.prototype.mergeData = function (diagram, isInit) {
            var _this = this;
            var model = diagram.model;
            model.commit(function (m) {
                if (_this.props.modelData !== undefined) {
                    m.assignAllDataProperties(m.modelData, _this.props.modelData);
                }
                m.mergeNodeDataArray(_this.props.nodeDataArray);
                if (_this.props.linkDataArray !== undefined && m instanceof go__namespace.GraphLinksModel) {
                    m.mergeLinkDataArray(_this.props.linkDataArray);
                }
            }, isInit ? 'initial merge' : 'merge data');
        };
        ReactDiagram.prototype.render = function () {
            return (React__namespace.createElement("div", { ref: this.divRef, className: this.props.divClassName, style: this.props.style }));
        };
        return ReactDiagram;
    }(React__namespace.Component));

    var ReactOverview = (function (_super) {
        __extends(ReactOverview, _super);
        function ReactOverview(props) {
            var _this = _super.call(this, props) || this;
            _this.divRef = React__namespace.createRef();
            return _this;
        }
        ReactOverview.prototype.getOverview = function () {
            if (this.divRef.current === null)
                return null;
            return go__namespace.Diagram.fromDiv(this.divRef.current);
        };
        ReactOverview.prototype.componentDidMount = function () {
            if (this.divRef.current === null)
                return;
            var overview;
            if (this.props.initOverview !== undefined) {
                overview = this.props.initOverview();
            }
            else {
                overview = new go__namespace.Overview();
                overview.contentAlignment = go__namespace.Spot.Center;
            }
            overview.div = this.divRef.current;
            overview.observed = this.props.observedDiagram;
        };
        ReactOverview.prototype.componentWillUnmount = function () {
            var overview = this.getOverview();
            if (overview !== null) {
                overview.div = null;
                overview.observed = null;
            }
        };
        ReactOverview.prototype.shouldComponentUpdate = function (nextProps, nextState) {
            if (nextProps.divClassName !== this.props.divClassName || nextProps.style !== this.props.style)
                return true;
            if (nextProps.observedDiagram === this.props.observedDiagram)
                return false;
            return true;
        };
        ReactOverview.prototype.componentDidUpdate = function (prevProps, prevState) {
            if (prevProps.observedDiagram === this.props.observedDiagram)
                return;
            var overview = this.getOverview();
            if (overview !== null) {
                overview.observed = this.props.observedDiagram;
            }
        };
        ReactOverview.prototype.render = function () {
            return (React__namespace.createElement("div", { ref: this.divRef, className: this.props.divClassName, style: this.props.style }));
        };
        return ReactOverview;
    }(React__namespace.Component));

    var ReactPalette = (function (_super) {
        __extends(ReactPalette, _super);
        function ReactPalette(props) {
            var _this = _super.call(this, props) || this;
            _this.wasCleared = false;
            _this.divRef = React__namespace.createRef();
            return _this;
        }
        ReactPalette.prototype.getPalette = function () {
            if (this.divRef.current === null)
                return null;
            return go__namespace.Diagram.fromDiv(this.divRef.current);
        };
        ReactPalette.prototype.clear = function () {
            var palette = this.getPalette();
            if (palette !== null) {
                palette.clear();
                this.wasCleared = true;
            }
        };
        ReactPalette.prototype.componentDidMount = function () {
            var _this = this;
            if (this.divRef.current === null)
                return;
            var palette = this.props.initPalette();
            palette.div = this.divRef.current;
            palette.delayInitialization(function () {
                _this.mergeData(palette, true);
            });
        };
        ReactPalette.prototype.componentWillUnmount = function () {
            var palette = this.getPalette();
            if (palette !== null) {
                palette.div = null;
            }
        };
        ReactPalette.prototype.shouldComponentUpdate = function (nextProps, nextState) {
            if (nextProps.divClassName !== this.props.divClassName || nextProps.style !== this.props.style)
                return true;
            if (nextProps.nodeDataArray === this.props.nodeDataArray &&
                nextProps.linkDataArray === this.props.linkDataArray &&
                nextProps.modelData === this.props.modelData)
                return false;
            return true;
        };
        ReactPalette.prototype.componentDidUpdate = function (prevProps, prevState) {
            var _this = this;
            if (prevProps.nodeDataArray === this.props.nodeDataArray &&
                prevProps.linkDataArray === this.props.linkDataArray &&
                prevProps.modelData === this.props.modelData)
                return;
            var palette = this.getPalette();
            if (palette !== null) {
                if (this.wasCleared) {
                    palette.delayInitialization(function () {
                        _this.mergeData(palette, true);
                        _this.wasCleared = false;
                    });
                }
                else {
                    this.mergeData(palette, false);
                }
            }
        };
        ReactPalette.prototype.mergeData = function (diagram, isInit) {
            var _this = this;
            var model = diagram.model;
            model.commit(function (m) {
                if (_this.props.modelData !== undefined) {
                    m.assignAllDataProperties(m.modelData, _this.props.modelData);
                }
                m.mergeNodeDataArray(_this.props.nodeDataArray);
                if (_this.props.linkDataArray !== undefined && m instanceof go__namespace.GraphLinksModel) {
                    m.mergeLinkDataArray(_this.props.linkDataArray);
                }
            }, isInit ? 'initial merge' : 'merge data');
        };
        ReactPalette.prototype.render = function () {
            return (React__namespace.createElement("div", { ref: this.divRef, className: this.props.divClassName, style: this.props.style }));
        };
        return ReactPalette;
    }(React__namespace.Component));

    exports.ReactDiagram = ReactDiagram;
    exports.ReactOverview = ReactOverview;
    exports.ReactPalette = ReactPalette;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
