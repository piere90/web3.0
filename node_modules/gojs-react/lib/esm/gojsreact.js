// Copyright (C) 1998-2022 by Northwoods Software Corporation. All Rights Reserved.
import { __extends } from 'tslib';
import * as go from 'gojs';
import * as React from 'react';

var ReactDiagram = (function (_super) {
    __extends(ReactDiagram, _super);
    function ReactDiagram(props) {
        var _this = _super.call(this, props) || this;
        _this.wasCleared = false;
        _this.modelChangedListener = null;
        _this.divRef = React.createRef();
        return _this;
    }
    ReactDiagram.prototype.getDiagram = function () {
        if (this.divRef.current === null)
            return null;
        return go.Diagram.fromDiv(this.divRef.current);
    };
    ReactDiagram.prototype.clear = function () {
        var diagram = this.getDiagram();
        if (diagram !== null) {
            diagram.clear();
            this.wasCleared = true;
        }
    };
    ReactDiagram.prototype.componentDidMount = function () {
        var _this = this;
        if (this.divRef.current === null)
            return;
        var diagram = this.props.initDiagram();
        diagram.div = this.divRef.current;
        this.modelChangedListener = function (e) {
            if (e.isTransactionFinished && e.model && !e.model.isReadOnly && _this.props.onModelChange) {
                var dataChanges = e.model.toIncrementalData(e);
                if (dataChanges !== null)
                    _this.props.onModelChange(dataChanges);
            }
        };
        diagram.addModelChangedListener(this.modelChangedListener);
        diagram.delayInitialization(function () {
            _this.mergeData(diagram, true);
        });
    };
    ReactDiagram.prototype.componentWillUnmount = function () {
        var diagram = this.getDiagram();
        if (diagram !== null) {
            diagram.div = null;
            if (this.modelChangedListener !== null) {
                diagram.removeModelChangedListener(this.modelChangedListener);
                this.modelChangedListener = null;
            }
        }
    };
    ReactDiagram.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        if (nextProps.divClassName !== this.props.divClassName || nextProps.style !== this.props.style)
            return true;
        if (nextProps.skipsDiagramUpdate)
            return false;
        if (nextProps.nodeDataArray === this.props.nodeDataArray &&
            nextProps.linkDataArray === this.props.linkDataArray &&
            nextProps.modelData === this.props.modelData)
            return false;
        return true;
    };
    ReactDiagram.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _this = this;
        if (prevProps.nodeDataArray === this.props.nodeDataArray &&
            prevProps.linkDataArray === this.props.linkDataArray &&
            prevProps.modelData === this.props.modelData)
            return;
        var diagram = this.getDiagram();
        if (diagram !== null) {
            if (this.wasCleared) {
                diagram.delayInitialization(function () {
                    _this.mergeData(diagram, true);
                    _this.wasCleared = false;
                });
            }
            else {
                this.mergeData(diagram, false);
            }
        }
    };
    ReactDiagram.prototype.mergeData = function (diagram, isInit) {
        var _this = this;
        var model = diagram.model;
        model.commit(function (m) {
            if (_this.props.modelData !== undefined) {
                m.assignAllDataProperties(m.modelData, _this.props.modelData);
            }
            m.mergeNodeDataArray(_this.props.nodeDataArray);
            if (_this.props.linkDataArray !== undefined && m instanceof go.GraphLinksModel) {
                m.mergeLinkDataArray(_this.props.linkDataArray);
            }
        }, isInit ? 'initial merge' : 'merge data');
    };
    ReactDiagram.prototype.render = function () {
        return (React.createElement("div", { ref: this.divRef, className: this.props.divClassName, style: this.props.style }));
    };
    return ReactDiagram;
}(React.Component));

var ReactOverview = (function (_super) {
    __extends(ReactOverview, _super);
    function ReactOverview(props) {
        var _this = _super.call(this, props) || this;
        _this.divRef = React.createRef();
        return _this;
    }
    ReactOverview.prototype.getOverview = function () {
        if (this.divRef.current === null)
            return null;
        return go.Diagram.fromDiv(this.divRef.current);
    };
    ReactOverview.prototype.componentDidMount = function () {
        if (this.divRef.current === null)
            return;
        var overview;
        if (this.props.initOverview !== undefined) {
            overview = this.props.initOverview();
        }
        else {
            overview = new go.Overview();
            overview.contentAlignment = go.Spot.Center;
        }
        overview.div = this.divRef.current;
        overview.observed = this.props.observedDiagram;
    };
    ReactOverview.prototype.componentWillUnmount = function () {
        var overview = this.getOverview();
        if (overview !== null) {
            overview.div = null;
            overview.observed = null;
        }
    };
    ReactOverview.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        if (nextProps.divClassName !== this.props.divClassName || nextProps.style !== this.props.style)
            return true;
        if (nextProps.observedDiagram === this.props.observedDiagram)
            return false;
        return true;
    };
    ReactOverview.prototype.componentDidUpdate = function (prevProps, prevState) {
        if (prevProps.observedDiagram === this.props.observedDiagram)
            return;
        var overview = this.getOverview();
        if (overview !== null) {
            overview.observed = this.props.observedDiagram;
        }
    };
    ReactOverview.prototype.render = function () {
        return (React.createElement("div", { ref: this.divRef, className: this.props.divClassName, style: this.props.style }));
    };
    return ReactOverview;
}(React.Component));

var ReactPalette = (function (_super) {
    __extends(ReactPalette, _super);
    function ReactPalette(props) {
        var _this = _super.call(this, props) || this;
        _this.wasCleared = false;
        _this.divRef = React.createRef();
        return _this;
    }
    ReactPalette.prototype.getPalette = function () {
        if (this.divRef.current === null)
            return null;
        return go.Diagram.fromDiv(this.divRef.current);
    };
    ReactPalette.prototype.clear = function () {
        var palette = this.getPalette();
        if (palette !== null) {
            palette.clear();
            this.wasCleared = true;
        }
    };
    ReactPalette.prototype.componentDidMount = function () {
        var _this = this;
        if (this.divRef.current === null)
            return;
        var palette = this.props.initPalette();
        palette.div = this.divRef.current;
        palette.delayInitialization(function () {
            _this.mergeData(palette, true);
        });
    };
    ReactPalette.prototype.componentWillUnmount = function () {
        var palette = this.getPalette();
        if (palette !== null) {
            palette.div = null;
        }
    };
    ReactPalette.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        if (nextProps.divClassName !== this.props.divClassName || nextProps.style !== this.props.style)
            return true;
        if (nextProps.nodeDataArray === this.props.nodeDataArray &&
            nextProps.linkDataArray === this.props.linkDataArray &&
            nextProps.modelData === this.props.modelData)
            return false;
        return true;
    };
    ReactPalette.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _this = this;
        if (prevProps.nodeDataArray === this.props.nodeDataArray &&
            prevProps.linkDataArray === this.props.linkDataArray &&
            prevProps.modelData === this.props.modelData)
            return;
        var palette = this.getPalette();
        if (palette !== null) {
            if (this.wasCleared) {
                palette.delayInitialization(function () {
                    _this.mergeData(palette, true);
                    _this.wasCleared = false;
                });
            }
            else {
                this.mergeData(palette, false);
            }
        }
    };
    ReactPalette.prototype.mergeData = function (diagram, isInit) {
        var _this = this;
        var model = diagram.model;
        model.commit(function (m) {
            if (_this.props.modelData !== undefined) {
                m.assignAllDataProperties(m.modelData, _this.props.modelData);
            }
            m.mergeNodeDataArray(_this.props.nodeDataArray);
            if (_this.props.linkDataArray !== undefined && m instanceof go.GraphLinksModel) {
                m.mergeLinkDataArray(_this.props.linkDataArray);
            }
        }, isInit ? 'initial merge' : 'merge data');
    };
    ReactPalette.prototype.render = function () {
        return (React.createElement("div", { ref: this.divRef, className: this.props.divClassName, style: this.props.style }));
    };
    return ReactPalette;
}(React.Component));

export { ReactDiagram, ReactOverview, ReactPalette };
